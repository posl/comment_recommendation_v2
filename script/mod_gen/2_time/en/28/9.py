def maxSumSubmatrix(matrix, k):
    """
    :type matrix: List[List[int]]
    :type k: int
    :rtype: int
    """
    # M1. 暴力法
    # 1. 遍历所有的子矩阵，计算每个子矩阵的和
    # 2. 保留所有不大于k的子矩阵的和
    # 3. 返回最大的和
    # O(m^2 * n^2)
    # O(mn)
    # 优化：提前终止
    # 1. 当前的sum > k，直接跳出循环
    # 2. 当前的sum == k，直接返回k
    # 3. 当前的sum < k，更新最大值
    # 4. 当前的sum == k，直接返回k
    # O(m^2 * n^2)
    # O(mn)
    # 优化：前缀和
    # 1. 求出每个矩形的前缀和
    # 2. 遍历所有的子矩阵，计算每个子矩阵的和
    # 3. 保留所有不大于k的子矩阵的和
    # 4. 返回最大的和
    # O(m^2 * n^2)
    # O(mn)
    # 优化：前缀和 + 二分法
    # 1. 求出每个矩形的前缀和
    # 2. 遍历所有的子矩阵，计算每个子矩阵的和
    # 3. 保留所有不大于k的子矩阵的和
    # 4. 返回最大的和
    # O(m^2 * nlogn)
    # O(mn)
    # 优化：前缀和 + 二分法 + 优先队列
    # 1. 求出每个矩

if __name__ == '__main__':
    maxSumSubmatrix()