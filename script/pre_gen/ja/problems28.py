#m x n 行列 matrix と整数 k が与えられたとき、その和が k よりも大きくないような、行列内の長方形の和の最大値を出力せよ。
#和が k よりも大きくない長方形が存在することが保証される。
#
#例 1：
#入力： matrix = [[1,0,1],[0,-2,3]], k = 2
#出力： 2
#説明： 青い長方形[[0, 1], [-2, 3]]の和は2であり、2はk（k = 2）より大きくない最大数であるから。
#
#例 2：
#入力： matrix = [[2,2,-1]], k = 3
#出力： 3
#
#制約：
#m == matrix.length
#n == matrix[i].length
#1 <= m, n <= 100
#-100 <= matrix[i][j] <= 100
#-10^5 <= k <= 10^5
#
#フォローアップ：行の数が列の数よりずっと大きい場合はどうなるか？
class Solution:
    def maxSumSubmatrix(self, matrix: list[list[int]], k: int) -> int:
