Synthesizing 10/10 solutions (Duplicates hidden)

=======
Suggestion 1

def twoSum(self, nums: list[int], target: int) -> list[int]:
        pass

=======
Suggestion 2

def twoSum(self, nums: list[int], target: int) -> list[int]:
        for index1, value1 in enumerate(nums):
            for index2, value2 in enumerate(nums):
                if (index1 != index2) and (value1 + value2 == target):
                    return [index1, index2]
        return []

=======
Suggestion 3

def twoSum(self, nums: list[int], target: int) -> list[int]:
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if (nums[i] + nums[j]) == target:
                    return [i, j]
        return []

=======
Suggestion 4

def twoSum(self, nums: list[int], target: int) -> list[int]:
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if nums[i] + nums[j] == target: return [i, j]
        return []

=======
Suggestion 5

def twoSum(self, nums: list[int], target: int) -> list[int]:
        for index, num in enumerate(nums):
            for index2, num2 in enumerate(nums):
                if index != index2:
                    if num + num2 == target:
                        return [index, index2]
        return []

=======
Suggestion 6

def twoSum(self, nums: list[int], target: int) -> list[int]:
        d = {}
        for i, n in enumerate(nums):
            if n in d:
                return [d[n], i]
            else:
                d[target - n] = i
        return [-1, -1]

=======
Suggestion 7

def twoSum(self, nums: list[int], target: int) -> list[int]:
        dic = {}
        for index, num in enumerate(nums):
            if (target - num) in dic:
                return [dic[target - num], index]
            else:
                dic[num] = index
        return [-1, -1]
